{ "docs": [{
  "_id": "_design/Timetable",
  "language": "javascript",
  "views": {
    "by_stop": {
      "map": "function(doc) {
        if(doc.type==\"Timetable\"){
          var route = doc.route ? doc.route.split(\" - \") : [];
          emit([doc.stop, parseInt(doc.line), route[2]], doc);
        }
      }"
    },
    "by_stop_id": {
      "map": "function(doc) {
        var id = doc._id;
        if(doc.type === \"Stop\"){
          emit([id, 0], doc);
        } else if(doc.type === \"Timetable\") {
          emit([doc.stop_id, 1], doc);
        }
      }"
    },
    "by_line": {
      "map": "function(doc) {
        if(doc.type==\"Timetable\"){
          var destination = doc.destination || doc.route.split(/-|,/).reverse()[0].replace(/^\s*/, \"\").replace(/\s*$/, \"\");
          emit([doc.line, destination, doc.source], doc);
        }
      }",
      "reduce": "function(key, values, rereduce) {

        var lines = [], routes = [];
        values.forEach(function(val){
          var line, route;
          if(!val.length){
            line = val.line;
            route = [val.route];
          } else {
            line = val[0];
            route = val[1];
          }
          if(typeof route === \"object\"){
            if(lines.indexOf(line) == -1) lines.push(line)
            route.forEach(function(r){
              if(routes.indexOf(r) == -1) routes.push(r)
            })
          } else {
            val.forEach(function(v){
              if(lines.indexOf(v) == -1) lines.push(v)
            })
          }
        });

        if(lines.length == 1){
          return [lines[0], routes]
        } else {
          return lines
        }
      }"
    },
    "by_source": {
      "map": "function(doc) {
        if(doc.type == \"Timetable\" && doc.source){
          emit([doc.source, doc.valid_from], doc);
        }
      }"
    }
  },
  "lists":{
    "filter": "function(head,req){
      var q = req.query;
      var result = head;
      delete result['update_seq'];
      var rows = Array();
      var row;

      if(q.only){
        if(q.exept)
          return 'blad';

        var only = q.only.split(',');
        while(row = getRow()){
          var i = only.length;
          var new_row = row;
          var doc = {};
          while(i--)
            doc[only[i]] = row['value'][only[i]];
          new_row['value'] = doc;
          rows.push(new_row);
        }
      } else if(q.except) {
        var except = q.except.split(',');
        while(row = getRow()){
          var i = except.length;
          while(i--)
            delete row['value'][except[i]];
          rows.push(row);
        }
      } else
        return 'blad 2';

      result['rows'] = rows;
      return(JSON.stringify(result));
    }"
  },
  "updates":{
    "dump": "function(doc,req){
      if(doc){
        doc.valid_until = req.query.new_doc_since;
        return [doc, \"ok\"];
      }
    }"
  }
},
{
  "_id": "_design/Stop",
  "language": "javascript",
  "views": {
    "by_name": {
      "map": "function(doc){
        if (doc.type == 'Stop'){
          emit([doc.name, doc.address], doc);
        }
      }"
    },
    "by_line": {
      "map": "function(doc) {
        if(doc.type==\"Timetable\"){
          var destination = doc.destination || doc.route.split(/-|,/).reverse()[0].replace(/^\s*/, \"\").replace(/\s*$/, \"\");
          emit([doc.line, destination, doc.source], {_id: doc.stop_id});
        }
      }"
    }
  },
  "lists":{
    "filter": "function(head,req){
      var q = req.query;
      var result = head;
      delete result['update_seq'];
      var rows = Array();
      var row;

      if(q.only){
        if(q.exept)
          return 'blad';

        var only = q.only.split(',');
        while(row = getRow()){
          var i = only.length;
          var new_row = row;
          var doc = {};
          while(i--)
            doc[only[i]] = row['value'][only[i]];
          new_row['value'] = doc;
          rows.push(new_row);
        }
      } else if(q.except) {
        var except = q.except.split(',');
        while(row = getRow()){
          var i = except.length;
          while(i--)
            delete row['value'][except[i]];
          rows.push(row);
        }
      } else
        return 'blad 2';

      result['rows'] = rows;
      return(JSON.stringify(result));
    }",
    "polyline": "function(head, req){
      var row, rows = [];
      var previous = getRow();
      while(row = getRow()){
        var poly = {};
        poly.id = previous.doc._id +\":\"+ row.value._id;
        poly.value = {type: \"Polyline\", points: previous.doc.polylines[row.value._id]};
        rows.push(poly);
        previous = row;
      }
      return(JSON.stringify({total_rows: rows.length, rows: rows}))
    }"
  },
  "filters":{
    "all": "function(doc){ if(doc.type && doc.type == \"Stop\") return true }"
  }
},
{
  "_id": "_design/Permissions",
  "language": "javascript",
  "validate_doc_update": "function(newDoc, oldDoc, userCtx){
    if(userCtx.roles.indexOf(\"_admin\") == -1)
      throw({\"forbidden\": \"You are not an admin\"})
  }"
}]}
