bagatela-api(1) -- dane o komunikacji miejskiej od przewoźników
===============================================================

WSTĘP DO API
------------
API (Interfejs Programowania Aplikacji) umożliwia programowy dostęp do danych
([przystanków]( #PRZYSTANEK ), [rozkładów jazdy]( #ROZK-AD-JAZDY )) z poziomu
aplikacji trzecich.

API jest zgodne ze wzorcem
[REST](http://en.wikipedia.org/wiki/Representational_State_Transfer).
Interakcja na zbiorach odbywa się protokołem HTTP i pozwala na wykonywanie
zapytań typu GET i POST. Dane przyjmowane i zwracane są w formacie
[JSON](http://json.org).

### Url

Każde miasto posiada swój własny adres url według wzoru:

    http://api.bagate.la/<kod_miasta>

Oto kody miast, których rozkłady są aktualnie gromadzone (oczekuj nowych miast):

    sk - Górnośląski Okręg Przemysłowy (od 20.06.2011)
    kr - Kraków (od 20.06.2011)
    dw - Wrocław (od 20.06.2011)

### Przykłady
Wszystkie przykłady interakcji z API korzystają z prostego narzędzia konsoli
`curl` i zostały wykonane w systemie GNU/Linux.

    curl http://api.bagate.la --verbose

<pre><code>* About to connect() to api.bagate.la port 80 (#0)
*   Trying 31.222.178.135... connected
* Connected to api.bagate.la (31.222.178.135) port 80 (#0)
> GET / HTTP/1.1
> User-Agent: curl/7.21.3 (x86_64-pc-linux-gnu) libcurl/7.21.3 OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.18
> Host: api.bagate.la
> Accept: */*
> 
< HTTP/1.1 200 OK
< Content-Type: application/json
< Connection: keep-alive
< Status: 200
< X-Powered-By: Phusion Passenger (mod_rails/mod_rack) 3.0.7
< Content-Length: 48
< Server: nginx/1.0.4 + Phusion Passenger 3.0.7 (mod_rails/mod_rack)
< 
* Connection #0 to host api.bagate.la left intact
* Closing connection #0
{"message":"Welcome aboard!","version":"40f6ca"}</code></pre>

### Debugging
Flaga `--verbose` wyświetla bardziej szczegółowe informacje o połączeniu.
Więcej informacji o narzędziu `curl` znajdziesz w [jego
dokumentacji](http://curl.haxx.se/docs/manpage.html). Przy nauce protokołu,
przydatne mogą okazać się również
[inne](http://justniffer.sourceforge.net/index.html)
[narzędzia](http://postbin.org).

### Kontrybucja
(również do dokumentacji) jest mile widziana! Weź
<https://github.com/Stanley/bagatela> na widły i poproś o akceptacje zmian.

ZAPYTANIA O DANE
----------------
Ponieważ dane są przechowywane w bazie danych CouchDB, która udostępnia
interfejs REST, nasz interfejs programistyczny jest z nim całkowicie zgodny.
Jego szczegóły opisano w [dokumentacji CouchDB
API](http://wiki.apache.org/couchdb/).

### Dokumenty
Dokument jest podstawową strukturą organizacji danych w bazie. Motywacją użycia
takiej jednostki jest łatwość przenoszenia rzeczywistych obiektów (takich jak
rozkłady jazdy) do postaci zrozumiałej dla komputera. Dokumenty są ograniczone,
nie sztywną strukturą, a jedynie tym, że składają się z tablicy dowolnej ilości
par, w których kluczem jest napis, a wartością dana o jedym z typów: binarny,
napis, liczba, tablica, tablica asocjacyjna lub niezdefiniowany. W bazie danych
dokumenty są przechowywane w formacie JSON i w tej samej formie są zwracane na
zewnątrz.

Każdy dokument posiada unikalny identyfikator `_id` oraz numer rewizji `_rev`.
Atrybuty te są nadawane automatycznie przez bazę danych. Aby otrzymać
pojedynczy dokument, (prawie zawsze) wystarczy przekazać jedynie identyfikator
`_id`. Np.:

	http://api.bagate.la/kr/d778919c8c13d6dfc59d8a4fbcffa409

Ścieżka: `/<id>`  
Metoda: `GET`  
Parametry: `id`, `rev` (opcjonalnie) - numer rewizji  
Odpowiedź: dokument o identyfikatorze `id` (domyślnie najnowsza rewizja).

Przykładowe użycie:

    curl -XGET http://api.bagate.la/kr/d778919c8c13d6dfc59d8a4fbcffa409

<pre class="highlight"><code class="language-javascript">{
  "_id":"d778919c8c13d6dfc59d8a4fbcffa409",
  "_rev":"3-c7ea32524b4fb94e66d7214a2eb62427",
  "type":"Stop",
  "updated_at":"2011-06-24T08:47:04Z",
  "name":"Agatowa",
  "location":{
    "lat":50.02198398,
    "lon":20.04249077
  }
}</code></pre>

Przeczytaj więcej o dokumentach w CouchDB na:
<http://guide.couchdb.org/editions/1/en/api.html#documents>.

### Zasoby
Zasób jest podzbiorem danych w bazie, wydzielonych względem typu (klasy) danej,
którą reprezentuje. Typ zasobu do którego należy dokument jest określony w polu
`type`.

### Widoki
Widok to predefiniowany indeks danych. Definicja widoku jest w bazie danych
specjalnym dokumentem i zawiera funkcje: mapującą i opcjonalnie redukującą.
Funkcje przetwarzają każdy dokument z osobna i zapisują wynik w posortowanej
liście (widoku). Istnieją dwa rodzaje wyszukań tego indeksu: o dokumenty z
danym kluczem i o dokumenty z kluczami mieszczącymi się w danym zakresie.
Jeżeli znamy konkretny klucz i dodamy go ścieżki widoku w parametrze `key`, to
w rezultacie otrzymamy wartość wygenerowaną przez dokument (jeden lub więcej,
gdy klucz nie jest unikalny), będący wynikiem przetwarzania funkcją mapującą
lub redukującą.

Częstszym użyciem widoków jest pytanie o zbiór dokumentów, których klucze są
zawarte w pewnym przedziale. Aby ułatwić takie zapytania, klucze często są
wartością typu lista, np. *[2010, 10, 6]*. Dzięki temu jesteśmy w stanie
zapytać o wszystkie dokumenty, których klucz zawiera się w danym przedziale np.
od *[2010, 9]* do *[2010, 10, {}]* (w tym przypadku, gdzie kluczem jest data,
zapytanie zwróci wszystkie dokumenty z kluczem od 1 września do 30
października).

Przeczytaj więcej o widokach w CouchDB na:
<http://guide.couchdb.org/editions/1/en/views.html>.

Ścieżka: `/_design/<zasób>/_view/<widok>`  
Metoda: `GET`  
Parametry:

* `descending` - jeżeli *true*, odwrócona kolejność zwracanych dokumentów. Uwaga: sortowanie odbywa się przed ograniczeniem przedziału. Może to oznaczać konieczność zamiany parametrów `startkey` z `endkey`.
* `endkey` - koniec przedziału włącznie. Domyślnie największa możliwa wartość.
* `endkey_docid` - identyfikator ostatniego dokumentu w odpowiedzi (używane do paginacji).
* `group` - jeżeli *false* to redukuje wszystkie dokumenty zgodnie z funkcją redukującą do jednej wartości. W przeciwnym wypadku wyniki przetwarzania każdego z dokumentów są grupowane. Domyślnie *false*.
* `group_level` - grupuje wyniki przetwarzania funkcją redukującą, mające pierwszych *grup_level* takich samych wartości klucza. Np.: klucze *["a", "b", "c"], ["a", "b", "d"], ["a", "c", "d"]* z parametrem *group_level=2* utworzą dwie grupy *["a", "b"], ["a", "c"]* . Jeżeli parametr `group` będzie *true* a `group_level` niezdefiniowany, to zwrócony zostanie wynik przetwarzania każdego dokumentu z osobna.
* `include_docs` - jeżeli *true*, dołącza oryginalny dokument w polu `doc`. Domyślnie *false*.
* `inclusive_end` - definiuje czy dokument o kluczu `endkey` jest dołączany do odpowiedzi. Domyślnie *true*.
* `key` - dokładna wartość klucza.
* `limit` - maksymalna liczba zwróconych dokumentów. Np. *10*.
* `reduce` - użyj funkcji redukującej. Domyślna wartość, gdy funkcja redukująca jest zdefiniowana, to *true*.
* `skip` - liczba pomijanych dokumentów. Domyślnie *0*.
* `stale` - definiuje czy akceptować przedawniony widok, w celu otrzymania natychmiastowej odpowiedzi (w przypadku gdy nowy widok jeszcze nie skończył się generować). Możliwa wartość: *ok*.
* `startkey` - początek przedziału włącznie. Domyślnie najmniejsza możliwa wartość.
* `startkey_docid` - identyfikator pierwszego dokumentu w odpowiedzi (używane do paginacji).

Wszystkie wyżej wymienione parametry są opcjonalne.

ROZKŁAD JAZDY
-------------
Fizycznie reprezentuje wydruk z przystanku. Jest związany z jedną linią i z
jednym przystankiem. Obowiązuje w ograniczonej ramie czasowej (choć data upływu
ważności nie jest znana dopóki nie zostanie opublikowana aktualizacja
rozkładu). Jest wiernym odzwierciedleniem tego co jest publikowane przez
przewoźników na ich oficjalnych stronach i nie zawiera żadnych dodatkowych
inforamcji (oprócz opcjonalnych atrybutów `stop_id` i `valid_until`).

### Atrybuty

* `_id` - identyfikator.
* `_rev` - numer rewizji.
* `line` - numer linii, którą opisuje rozkład. Np. *"4"*.
* `route` - trasa linii. Lista głównych ulic, którymi biegnie linia. Np. *"Al. 3 Maja, Podwale, Basztowa, Lubicz, Rakowicka"*.
* `destination` (tylko jeżeli parametr `route` nie istnieje) - przystanek docelowy. Np. *"Okęcie"*.
* `stop` - nazwa przystanku na którym znajduje się rozkład. Np. *"Batorego"*.
* `stop_id` (opcjonalnie) - identyfikator przystanku `Stop` przy którym zatrzymuje się transport.
* `tables` - tablice odjazdów. Atrybut typu tablicy asocjacyjnej, przechowującej pary, w których opisowi dni odpowiada tablica odjazdów. Opis dania (klucz) to np. *"Dzień powszedni"*. Tablica odjazdów (wartość) to np. *{"4":["43"], "5":["02","17","38","48","58"]}*, co oznacza, że w dni powszednie, o godzinie 4:43, 5:02, 5:17 itd. odjeżdża transport. Minuty są ciągiem znaków, gdyż mogą zawierać opis kursu. Np. *"24A"*.
* `type` - typ. Zawsze *"Timetable"*.
* `source` - źródło danych. Np. adres URL: *"http://rozklady.mpk.krakow.pl/aktualne/0004/0004t023.htm"*.
* `updated_at` - czas ostatniej modyfikacji w bazie danych (tj. czas połączenia ze źródłem).
* `valid_from` - dzień od którego obowiązuje rozkład. Np. *"04.10.2010"*.
* `valid_until` (opcjonalnie) - dzień do którego obowiązuje rozkład. Jeżeli atrybut nie jest zdefiniowany i `valid_from` wskazuje na przeszły dzień to rozkład jazdy jest aktualnie obowiązującym. Atrybut zostanie zdefiniowany nie wcześniej, niż nowa wersja tego rozkładu zostanie publikowana lub aktualny zostanie anulowany.

### Załączniki

* `source.html` - oryginalna strona HTML z rozkładem jazdy.

### Widoki
Definicje funkcji mapujących, redukujących i listujących rozkłady jazdy, są
dokumentem o idenyfikatorze *"_design/Timetables"*.

**[map] by\_line**

Ścieżka: `/_design/Timetables/_view/by_line?reduce=false`  
Metoda: `GET`  
Odpowiedź: lista rozkładów jazdy  
Kolejność sortowania: `line`, `destination`, `source`  

Przykładowe użycie:

    curl -XGET http://api.bagate.la/kr/_design/Timetables/_view/by_line?startkey=["6","SALWATOR"]&endkey=["6","SALWATOR",{}]&reduce=false

Zwraca listę rozkładów na linii numer *"6"*, jadącej w kierunku przystanku
*"Salwator"*, posortowanych od pierwszego do ostatniego.

**[reduce] by\_line**

Jeżeli interesuje nas opis danej lini (będący skrótem informacji z wielu
rozkładów jazdy), musimy skorzystać z widoku wygenerowanego funkcją redukującą.

Ścieżka: `/_design/Timetables/_view/by_line`  
Metoda: `GET`  
Odpowiedź: liczba dokumentów w danej grupie

Przykładowe użycia:

    curl -XGET http://api.bagate.la/kr/_design/Timetables/_view/by_line?startkey=["113","ALEJA PRZYJAŹNI"]&endkey=["113","ALEJA PRZYJAŹNI",{}]&group_level=2

Zwraca liczbę przystanków na linii *113* w kierunku przystanku *Aleja Przyjaźni*.

    curl -XGET http://api.bagate.la/kr/_design/Timetables/_view/by_line?group_level=1

Zwraca liczbę przystanków na wszystkich liniach o tym samym numerze (tam i z
powrotem). Zapytanie jest również przydatne, gdy chcemy uzyskać listę numerów
linii (które w zwróconym rezultacie są kluczem; parametr `key`). Należy
pamiętać, że numery linii są ciągami znaków, a nie liczb, dlatego linia *"10"*
pojawi się przed *"2"*.

**[map] by\_source**

Ścieżka: `/_design/Timetables/_view/by_source`  
Metoda: `GET`  
Odpowiedź: lista rozkładów jazdy  
Kolejność sortowania: `source`, `valid_from`  

Przykładowe użycie.

    curl -XGET http://api.bagate.la/kr/_design/Timetables/_view/by_source?startkey=["http://rozklady.mpk.krakow.pl/aktualne/0000/0000t001.htm"]&limit=1

Zwraca najnowszy rozkład jazdy pozyskany z danego źródła.

**[map] by\_stop**

Ścieżka: `/_design/Timetables/_view/by_stop`  
Metoda: `GET`  
Odpowiedź: lista przystanków i rozkładów jazdy  
Kolejność sortowania: `stop`, `line`, `destination`  

Przykładowe użycie:

    curl -XGET http://api.bagate.la/kr/_design/Timetables/_view/by_stop?key=["Agatowa","125","ZŁOCIEŃ"]

Zwraca rozkłady jazdy linii *"125"*, w stronę przystanku *"Złocień"*, na przystanku *"Agatowa"*.

**[map] by\_stop\_id**

**UWAGA**: *ten widok wymaga, aby rozkłady jazdy deklarowały konkretny
przystanek na którym się znajdują w polu `stop_id`, które może być nie
zdefiniowane.*

Ścieżka: `/_design/Timetables/_view/by_stop_id`  
Metoda: `GET`  
Odpowiedź: lista przystanków i rozkładów jazdy  
Kolejność sortowania przystanków: `id`  
Kolejność sortowania rozkładów: `line`  

Przykładowe użycie:

    curl -XGET http://api.bagate.la/kr/_design/Timetables/_view/by_stop_id?startkey=["d778919c8c13d6dfc59d8a4fbcfeeb5f"]&endkey=["d778919c8c13d6dfc59d8a4fbcfeeb5f",{}]

Zwraca przystanek oraz wszystkie rozkłady jazdy na danym przystanku. Aby
pominąć przystanek, należy dodać parametr `skip=1`.

**[list] filter**

Ścieżka: `/_design/Timetables/_list/filter/<widok>`  
Metoda: `GET`  
Parametr: `widok`, *only* lub *except* - lista parametrów, połączonych przecinkiem, które mają (lub których nie mają) zawierać wartości zwrócone przez funckję mapującą  
Odpowiedź: to samo co zwróci widok, z filtrowanymi wartościami

Przykładowe użycie:

    curl -XGET http://api.bagate.la/kr/_design/Timetables/_list/filter/by_line?only=stop,tables&reduce=false&limit=1

Zwraca jeden rozkład jazdy z polami: `stop` i `tables`.

[Zobacz scenariusze testujące *"_design/Timetables"*.](https://github.com/Stanley/bagatela/blob/master/features/timetables_design.feature)

PRZYSTANEK
----------
Fizyczna wiata lub słup przy którym wiszą rozkłady jazdy i zatrzymują się pojazdy komunikacji.

### Atrybuty

* `_id` - identyfikator.
* `_rev` - numer rewizji.
* `address` (opcjonalnie) - ulica przy której znajduje się przystanej. Np. "Karmelicka".
* `location.lat` - szerokość geograficzna. Np. *50.06309891*.
* `location.lon` - długość geograficzna. Np. *19.9326992*.
* `name` - nazwa przystanku. Np. *"Teatr Bagatela"*.
* `operates` (opcjonalnie) - lista typów pojazdów, które obsługuje przystanek. Np. *["Trams", "Buses"]*.
* `polylines` (opcjonalnie) - tablica asocjacyjna, gdzie kluczem jest identyfikator dowolnego przystanku, a wartością tablica współrzędnych, tworzących linię łamaną, połączenie tych dwóch przystanków.
* `type` - typ. Zawsze *"Stop"*.
* `updated_at` - czas ostatniej modyfikacji.

Definicje funkcji mapujących, redukujących i listujących przystanki są dokumentem o idenyfikatorze *"_design/Stops"*.

### Widoki

**[map] by\_line**

**UWAGA**: *ten widok wymaga, aby rozkłady jazdy deklarowały konkretny
przystanek na którym się znajdują w polu `stop_id`, które może być nie
zdefiniowane.*

Ścieżka: `/_design/Stops/_view/by_line`  
Metoda: `GET`  
Odpowiedź: lista przystanków
Kolejność sortowania: `line`, `destination`, `source`

Przykładowe użycie:

    curl -XGET http://api.bagate.la/kr/_design/Stops/_view/by_line?startkey=["9","MISTRZEJOWICE"]&endkey=["9","MISTRZEJOWICE",{}]

Zwraca wszystkie przystanki na linii *"9"*, jadącej w kierunku przystanku *"Mistrzejowice"*.

**[map] by\_name**

Ścieżka: `/_design/Stops/_view/by_name`  
Metoda: `GET`  
Odpowiedź: lista przystanków  
Kolejność sortowania: `name`, `address`

Przykładowe użycie:

    curl -XGET http://api.bagate.la/kr/_design/Stops/_view/by_name?key=["Reymana","Aleja 3 maja"]

Zwraca przystanki o nazwie *"Reymana"* i adresie *"Aleja 3 maja"*. Uwaga:
możemy otrzymać więcej niż jeden dokument, mimo że nie zdefiniowaliśmy zakresu
klucza, a konkretną wartość, która w tym przypadku nie jest unikalna.

<!-- TODO: reduce by_name -->

**[list] filter**

Ścieżka: `/_design/Stops/_list/filter/<widok>`  
Metoda: `GET`  
Parametr: `widok`, `only` lub `except` - lista parametrów, połączonych przecinkiem, które mają (lub których nie mają) zawierać wartości zwrócone przez funckję mapującą  
Odpowiedź: to samo co zwróci widok, z filtrowanymi wartościami

Przykładowe użycie:

    curl -XGET http://api.bagate.la/kr/_design/Stops/_list/filter/by_name?except=polylines,type,updated_at&limit=1

Zwraca jeden przystanek bez pól: `polylines`, `type` i `updated_at`.

<!--
**[list] polyline**

Ścieżka: `/_design/Stops/_list/polyline/<widok>`
Metoda: `GET`  
Parametr: `widok`
-->

[Zobacz scenariusze testujące *"_design/Stops"*.](https://github.com/Stanley/bagatela/blob/master/features/stops_design.feature)

REPLIKACJE
----------
Replikacje są wykorzystywane do synchronizacji dwóch kopii tej samej bazy danych.

Ścieżka: `http://api.bagate.la/_replicate`  
Metoda: `POST`  
Parametry ładunku:

* `source` - *kod_miasta* czyli identyfikator bazy danych będącej źródłem danych np.: *"kr"*.
* `target` - baza danych do której eksportujemy dane np.: *"http://user:password@rozklady.cloudant.com/kr"*.
* `continuous` (opcjonalnie) - jeżeli *true* replikacja będzie trwała do momentu w którym sami przerwiemy proces (wysyłając podobne zapytanie z parametrem "`cancel`"*:true*)   

Odpowiedź: Raport z wykonanej (lub przerwanej) replikacji. 

Przykładowe użycie:

    curl -XPOST http://api.bagate.la/_replicate -H 'Content-Type: application/json' -d '{
      "source":"dw",
      "target":"https://stanley:<password>@stanley.cloudant.com/dw/"
    }'    

SCENARIUSZE TESTUJĄCE
---------------------
Aby zapewnić stabilność i niezawodność API, konieczne jest posiadanie testów
funkcjonalnych. Ponieważ są one również świetną dokumentacją, dla każdego
zagadnienia dokumentacji [został
napisany](https://github.com/Stanley/bagatela/tree/master/features) odrępny
test. Każdy z nich jest scenariuszem użycia API w czystym i zrozumiałym dla
każdego języku angielskim, który jest interpretowany przez komputer za pomocą
nadzędzia [Cucumber](http://cukes.info/).

<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24458797-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
